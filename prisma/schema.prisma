generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  name        String?         @db.VarChar(100)
  email       String          @unique @db.VarChar(100)
  password    String
  phone       String?         @db.VarChar(15)
  avatar      String?
  role        String          @default("employee") @db.VarChar(50)
  createdAt   DateTime?       @default(now()) @map("created_at")
  lastLogin   DateTime?       @map("last_login") // most recent login
  previousLogin  DateTime?    @map("previous_login") // login before last one

  // Relations
  leads         Lead[]          @relation("UserLeads")       // leads created by this user
  closedLeads   Lead[]          @relation("UserClosedLeads") // leads closed by this user
  activities    UserActivity[]
  assignedLeads      LeadAssignment[]   @relation("AssignedLeads")
  assignedByLeads    LeadAssignment[]   @relation("LeadAssignedBy")
  notifications      Notification[]
  requestedNotifications Notification[] @relation("RequestedBy")
  actedNotifications     Notification[] @relation("ActedBy")
  reassignPermissionsGranted ReassignPermission[] @relation("GrantedPermissions")
  reassignPermissions        ReassignPermission[] @relation("AdminPermissions")
  comments LeadComment[] 

  @@map("users")
}

model Lead {
  id           Int        @id @default(autoincrement())

  // Required fields
  source       String     @db.VarChar(100) // Services
  customerName String     @map("customer_name") @db.VarChar(100)
  phone        String     @db.VarChar(15)

  // Optional fields
  email        String?    @db.VarChar(100)
  priority     String?    @default("Medium") @db.VarChar(20)
  dueDate      DateTime?  @map("due_date")
  description  Json?      // FAQ JSON structure
  state        String?    @db.VarChar(100)
  district     String?    @db.VarChar(100)
  location     String?    @db.VarChar(255)

  // System fields
  status       String?    @default("New") @db.VarChar(50)
  createdBy    Int?       @map("created_by")
  closedBy     Int?       @map("closed_by")
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @default(now()) @map("updated_at")
  closedAt     DateTime?  @map("closed_at")

  // Relations
  creator      User?      @relation("UserLeads", fields: [createdBy], references: [id], onDelete: SetNull)
  closedByUser User?      @relation("UserClosedLeads", fields: [closedBy], references: [id], onDelete: SetNull)
  activities   UserActivity[]
  assignments  LeadAssignment[]
  comments      LeadComment[]

  @@map("leads")
}


model UserActivity {
  id         Int          @id @default(autoincrement())
  userId     Int          @map("user_id")
  username   String?      @db.VarChar(100)   
  action     ActivityType
  details    String
  leadId     Int?         @map("lead_id")
  leadTitle  String?       @map("lead_title") @db.VarChar(255)
   
  createdAt  DateTime?    @default(now()) @map("created_at")

  // Relations
  lead       Lead?        @relation(fields: [leadId], references: [id], onDelete: SetNull)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity")
}


enum ActivityType {
  CREATED
  UPDATED
  CLOSED
  DELETED
}

model LeadAssignment {
  id             Int       @id @default(autoincrement())
  leadId         Int
  userId         Int
  assignedBy     Int       // who assigned this lead
  assignedAt     DateTime  @default(now())
  active         Boolean   @default(true)

  // Relations
  lead           Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user           User      @relation("AssignedLeads", fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User      @relation("LeadAssignedBy", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([leadId, userId])
  @@map("lead_assignments")
}

model Notification {
  id            Int               @id @default(autoincrement())
  recipientId   Int
  message       String
  leadId        Int?
  type          NotificationType  @default(INFO)
  status        RequestStatus?
  requestedById Int?
  actedById     Int?
  createdAt     DateTime          @default(now()) @map("created_at")
  read          Boolean           @default(false)

  recipient     User              @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  requestedBy   User?             @relation("RequestedBy", fields: [requestedById], references: [id])
  actedBy       User?             @relation("ActedBy", fields: [actedById], references: [id])

  @@map("notifications")
}

enum NotificationType {
  INFO
  REASSIGN_REQUEST
  REASSIGN_DECISION
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ReassignPermission {
  id         Int      @id @default(autoincrement())
  leadId     Int
  adminId    Int
  grantedBy  Int
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  admin      User     @relation("AdminPermissions", fields: [adminId], references: [id], onDelete: Cascade)
  granter    User     @relation("GrantedPermissions", fields: [grantedBy], references: [id], onDelete: Cascade)

  @@index([leadId, adminId, used])
  @@map("reassign_permissions")
}

model LeadComment {
  id        Int      @id @default(autoincrement())
  leadId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

//fields for replies
  replyToId Int?
  replyTo   LeadComment? @relation("CommentReplies", fields: [replyToId], references: [id], onDelete: SetNull)

  // Relations
  lead      Lead       @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   LeadComment[] @relation("CommentReplies")

  @@index([leadId])
  @@map("lead_comments")
}

